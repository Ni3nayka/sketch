#include "functions_codes.h"

#define M 5

//    min  max  porog
//in1 650 1023
//in2 650 1023
//in3           1023
//in4 450       500 


int main ()
{
    mcu_initialization();
    while(1) if (1) test();
    return 0;
}

int testing() {
    //return 1;
}

void test() {
    /*forward(0);
  forward(1);
  right();
  forward(0);
  left();
  forward(1);
  if (dist()) {
    take();
    left();
    forward(0);
    forward(1);
    quit();
    left();
    forward(0);
    right();
  }
  else {
    left();
    forward(0);
    forward(1);
    take();
    left();
    forward(0);
    forward(1);
    quit();
    left();
    forward(0);
    left();
  }
  forward(0);
  left();
  forward(1);
  if (dist()) {
    take();
    left();
    forward(0);
    forward(1);
    quit();
    left();
    forward(0);
    right();
  }
  else {
    left();
    forward(0);
    forward(1);
    take();
    left();
    forward(0);
    forward(1);
    quit();
    left();
    forward(0);
    left();
  }
  forward(1);
  startMotor(1, M);
  startMotor(2, M);
  delay(0,0,0,200);
  startMotor(1, 0);
  startMotor(2, 0);
  */
}
/*
void quit() {
  startMotor(3, -20);
  startMotor(4, -20);
  delay(0,0,0,1000);
  startMotor(3, 0);
  startMotor(4, 0);
  startMotor(1, -M);
  startMotor(2, -M);
  delay(0,0,0,200);
  startMotor(1, 0);
  startMotor(2, 0);
  delay(0,0,0,1000);
}

void take() {
  startMotor(3, 20);
  startMotor(4, 20);
  delay(0,0,0,1000);
  startMotor(3, 10);
  startMotor(4, 10);
}

void forward(bool flag) {
    int in1 = M, in2 = M, e;
  bool in3 = 0, Flag = 1;
  bool F = 1;
  if (dist()) F = 0;
  while (((in1 > M/2) || (in2 > M/2)) && Flag) {
    dat(in1, in2, in3);
    if (in3 && flag && (in1 > M/1.05) && (in2 > M/1.05) || (dist() && F)) Flag = 0;
    e = (in1 - in2)*2.3;
    startMotor(1, M + e);
    startMotor(2, M - e);
  }
  if (dist()) {
    startMotor(1, -M);
    startMotor(2, -M);
    delay(0,0,0,10);
  }
  startMotor(1, 0);
  startMotor(2, 0);
  delay(0,0,0,1000);
}

boolean dist() {
  bool f = 0;
  if (analogRead(IN4) < 200) builtInRGB(RED);
  else { f = 1; builtInRGB(GREEN); }
  return f;
}

void left() {
  int in1, in2;
  bool in3;
  dat(in1, in2, in3);
  startMotor(1, -M);
  startMotor(2, M*1.3);
  while (in1 <= M/2) dat(in1, in2, in3);
  while (in1 >= M/2) dat(in1, in2, in3);
  while (in1 <= M/2) dat(in1, in2, in3);
  startMotor(1, 0);
  startMotor(2, 0);
  delay(0,0,0,1000);
}

void right() {
  int in1, in2;
  bool in3;
  dat(in1, in2, in3);
  startMotor(1, M*1.3);
  startMotor(2, -M);
  while (in2 <= M/2) dat(in1, in2, in3);
  while (in2 >= M/2) dat(in1, in2, in3);
  while (in2 <= M/2) dat(in1, in2, in3);
  startMotor(1, 0);
  startMotor(2, 0);
  delay(0,0,0,1000);
}

void dat(int& in1, int& in2, bool& in3) {
    //in1 = map(analogRead(IN1), 350, 990, 0, M);
    //in2 = map(analogRead(IN2), 285, 985, 0, M);
    //if (analogRead(IN3) > 500) in3 = 1;
    //else in3 = 0;
}
*/
/*
bool but() {
  bool f = 0;
  if(button(5, PRESSED)) f = 1;
  return f;
}

void startMotor(int number, int speed) {
    if (number == 1) {
        if (speed > 0) dc_motor(LEFT_MOTOR_1,FORWARD_DIRECTION,speed);
        else dc_motor(LEFT_MOTOR_1,BACKWARD_DIRECTION,speed);
    }
    if (number == 2) {
        if (speed > 0) dc_motor(RIGHT_MOTOR_1,FORWARD_DIRECTION,speed);
        else dc_motor(RIGHT_MOTOR_1,BACKWARD_DIRECTION,speed);
    }
}
*/